import{S as dp,i as gp,s as hp,k as m,q as F,a as i,w as o,l as d,m as g,r as C,h as a,c as $,x as t,n as h,b as e,W as A,y as r,f as c,t as D,z as y,a2 as bp}from"../../../../chunks/singletons-79165f10.js";import{I as _p,L as w,C as b,a as v}from"../../../../chunks/Info-8cb253a1.js";function wp(u){let p,l,f,I,P,k,q,Ss,Z;return f=new b({props:{code:"f(dataIn, ...others)"}}),P=new b({props:{code:"f(dataIn, ...others)"}}),q=new b({props:{code:"f(...others)(dataIn)"}}),{c(){p=m("p"),l=F("All functions are curried, Remeda-style, so if you see "),o(f.$$.fragment),I=F(", it can be called with either "),o(P.$$.fragment),k=F(" or "),o(q.$$.fragment),Ss=F(".")},l(_){p=d(_,"P",{});var E=g(p);l=C(E,"All functions are curried, Remeda-style, so if you see "),t(f.$$.fragment,E),I=C(E,", it can be called with either "),t(P.$$.fragment,E),k=C(E," or "),t(q.$$.fragment,E),Ss=C(E,"."),E.forEach(a)},m(_,E){e(_,p,E),A(p,l),r(f,p,null),A(p,I),r(P,p,null),A(p,k),r(q,p,null),A(p,Ss),Z=!0},p:bp,i(_){Z||(c(f.$$.fragment,_),c(P.$$.fragment,_),c(q.$$.fragment,_),Z=!0)},o(_){D(f.$$.fragment,_),D(P.$$.fragment,_),D(q.$$.fragment,_),Z=!1},d(_){_&&a(p),y(f),y(P),y(q)}}}function vp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Ep(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function qp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function jp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function xp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function kp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Ip(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Pp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Hp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Sp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function zp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Mp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Op(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Rp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Bp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Tp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Up(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Wp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Yp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Jp(u){let p;return{c(){p=F("#")},l(l){p=C(l,"#")},m(l,f){e(l,p,f)},d(l){l&&a(p)}}}function Np(u){let p,l,f,I,P,k,q,Ss,Z,_,E,cl,zs,Dl,Da,Ms,Yn,yl,ya,Os,S,cs,Fl,Rs,Fa,z,Ds,Cl,Bs,Ca,M,Al,Ts,il,Us,$l,Aa,O,fl,Ws,ul,Ys,ml,ia,R,dl,Js,gl,Ns,hl,$a,ys,bl,Ks,_l,fa,Fs,wl,Ls,vl,ua,Cs,El,Vs,ql,ma,ss,As,jl,da,Jn,xl,ga,Gs,Nn,kl,ha,Qs,ns,is,Il,ba,Xs,as,$s,Pl,_a,Zs,ls,fs,Hl,wa,Kn,Sl,va,sn,Ln,zl,Ea,nn,ps,us,Ml,qa,Vn,Ol,ja,an,es,ms,Rl,xa,ln,B,ds,Bl,pn,ka,Gn,Tl,Ia,en,T,gs,Ul,on,Pa,hs,Wl,tn,Yl,Ha,rn,cn,Dn,yn,Fn,U,bs,Jl,Cn,Sa,_s,Nl,An,Kl,za,$n,fn,W,ws,Ll,un,Ma,j,Vl,mn,Gl,dn,Ql,gn,Xl,hn,Zl,Oa,bn,Y,vs,sp,_n,Ra,J,Es,np,wn,Ba,N,qs,ap,vn,Ta,K,js,lp,En,Ua,L,xs,pp,qn,Wa,V,ks,ep,jn,Ya,Qn,op,Ja,G,Is,tp,xn,Na,H,rp,kn,cp,In,Dp,Pn,yp,Ka,x,Fp,Hn,Cp,Sn,Ap,zn,ip,Mn,$p,La,On,Va;return I=new _p({props:{$$slots:{default:[wp]},$$scope:{ctx:u}}}),q=new w({props:{class:"header-anchor",href:"#importing","aria-hidden":"true",$$slots:{default:[vp]},$$scope:{ctx:u}}}),E=new b({props:{code:"updeep-remeda"}}),zs=new b({props:{code:"u.update"}}),Ms=new v({props:{lang:"text",ext:"text",linesCount:6,code:`<pre><code><span class="line"><span style="color: undefined">import u from &#39;@yanick/updeep-remeda&#39;;</span></span>
<span class="line"><span style="color: undefined"></span></span>
<span class="line"><span style="color: undefined">const foo = u({a:1}, { a: x =&gt; x + 1 });</span></span>
<span class="line"><span style="color: undefined"></span></span>
<span class="line"><span style="color: undefined">const bar = u.updateIn({ a: { b: 2 } }, &#39;a.b&#39;, 3 );</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),Os=new v({props:{lang:"text",ext:"text",linesCount:2,code:`<pre><code><span class="line"><span style="color: undefined">import { updateIn, omit } from &#39;@yanick/updeep-remeda&#39;;</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),cs=new w({props:{class:"header-anchor",href:"#u-datain-updates","aria-hidden":"true",$$slots:{default:[Ep]},$$scope:{ctx:u}}}),Rs=new b({props:{code:"u(dataIn, updates)"}}),Ds=new w({props:{class:"header-anchor",href:"#u-update-datain-updates","aria-hidden":"true",$$slots:{default:[qp]},$$scope:{ctx:u}}}),Bs=new b({props:{code:"u.update(dataIn, updates)"}}),Ts=new b({props:{code:"updates"}}),Us=new b({props:{code:"u"}}),Ws=new b({props:{code:"updates"}}),Ys=new b({props:{code:"object[key]"}}),Js=new b({props:{code:"updates"}}),Ns=new b({props:{code:"object"}}),Ks=new b({props:{code:"updates"}}),Ls=new b({props:{code:"function() { return { a: 0 }; }"}}),Vs=new b({props:{code:"u.update(...)"}}),As=new w({props:{class:"header-anchor",href:"#simple-update","aria-hidden":"true",$$slots:{default:[jp]},$$scope:{ctx:u}}}),Gs=new v({props:{lang:"javascript",ext:"js",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">first</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Jane</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">last</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">West</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">first</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Susan</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">first</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Susan</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">last</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">West</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),Qs=new v({props:{lang:"javascript",ext:"js",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> scoreboard </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">28</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(scoreboard</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">36</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">36</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),is=new w({props:{class:"header-anchor",href:"#multiple-updates","aria-hidden":"true",$$slots:{default:[xp]},$$scope:{ctx:u}}}),Xs=new v({props:{lang:"javascript",ext:"js",linesCount:15,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">first</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mike</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">last</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Smith</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">28</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">last</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Jones</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">36</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">first</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mike</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">last</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Jones</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">36</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),$s=new w({props:{class:"header-anchor",href:"#use-a-function","aria-hidden":"true",$$slots:{default:[kp]},$$scope:{ctx:u}}}),Zs=new v({props:{lang:"javascript",ext:"js",linesCount:13,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> increment </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> scoreboard </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">team1</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">team2</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(scoreboard</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">team2</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> increment </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">scores</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">team1</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">team2</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),fs=new w({props:{class:"header-anchor",href:"#array-manipulation","aria-hidden":"true",$$slots:{default:[Ip]},$$scope:{ctx:u}}}),sn=new v({props:{lang:"javascript",ext:"js",linesCount:14,code:`<pre><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">addTodo</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">todos</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">todos</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> done</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> addTodo </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> state)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),nn=new v({props:{lang:"javascript",ext:"js",linesCount:16,code:`<pre><code><span class="line"><span style="color: #89DDFF">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">concat</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prop</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">remeda</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95">// add a new todo</span></span>
<span class="line"><span style="color: #A6ACCD">state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(state</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">concat</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(state)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95">// remove all done todos</span></span>
<span class="line"><span style="color: #A6ACCD">state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(state</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reject</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">prop</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">done</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">)) </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(state)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),us=new w({props:{class:"header-anchor",href:"#default-input-data","aria-hidden":"true",$$slots:{default:[Pp]},$$scope:{ctx:u}}}),an=new v({props:{lang:"javascript",ext:"js",linesCount:3,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">null,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">foo</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bar</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">foo</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bar</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),ms=new w({props:{class:"header-anchor",href:"#partial-application","aria-hidden":"true",$$slots:{default:[Hp]},$$scope:{ctx:u}}}),ln=new v({props:{lang:"javascript",ext:"js",linesCount:7,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> inc </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> addOneYear </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> increment </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">addOneYear</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Shannon Barnes</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">62</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Shannon Barnes</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">63</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),ds=new w({props:{class:"header-anchor",href:"#u-freeze-datain","aria-hidden":"true",$$slots:{default:[Sp]},$$scope:{ctx:u}}}),pn=new b({props:{code:"u.freeze(dataIn)"}}),en=new v({props:{lang:"javascript",ext:"js",linesCount:3,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">freeze</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">someKey</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Some Value</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">someKey </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mutate</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95">// ERROR in development</span></span>
<span class="line"></span></code></pre>`}}),gs=new w({props:{class:"header-anchor",href:"#u-updatein-datain-path-value","aria-hidden":"true",$$slots:{default:[zp]},$$scope:{ctx:u}}}),on=new b({props:{code:"u.updateIn(dataIn, path, value)"}}),tn=new b({props:{code:"'*'"}}),rn=new v({props:{lang:"javascript",ext:"js",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">updateIn</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">black</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bunny.color</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">brown</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">brown</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),cn=new v({props:{lang:"javascript",ext:"js",linesCount:7,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">updateIn</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">0.1.color</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">brown</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #A6ACCD">)([[</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">blue</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">red</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> []])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">([[</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">blue</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">brown</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> []])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),Dn=new v({props:{lang:"javascript",ext:"js",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> incr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">updateIn</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bunny.age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> incr)(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),yn=new v({props:{lang:"javascript",ext:"js",linesCount:7,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">updateIn</span><span style="color: #A6ACCD">([</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bunny</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">bunny</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),Fn=new v({props:{lang:"javascript",ext:"js",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">updateIn</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">todos.*.done</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #A6ACCD">)(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">todos</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">done</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),bs=new w({props:{class:"header-anchor",href:"#u-constant-datain","aria-hidden":"true",$$slots:{default:[Mp]},$$scope:{ctx:u}}}),Cn=new b({props:{code:"u.constant(dataIn)"}}),An=new b({props:{code:"u.constant"}}),$n=new v({props:{lang:"javascript",ext:"js",linesCount:16,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> user </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mitch</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">favorites</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">band</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Nirvana</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">movie</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">The Matrix</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> newFavorites </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">band</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Coldplay</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(user</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">favorites</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">constant</span><span style="color: #A6ACCD">(newFavorites) </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mitch</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">favorites</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">band</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Coldplay</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),fn=new v({props:{lang:"javascript",ext:"js",linesCount:3,code:`<pre><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> alwaysFour </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">constant</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">alwaysFour</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">32</span><span style="color: #A6ACCD">))</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),ws=new w({props:{class:"header-anchor",href:"#u-if-datain-predicate-updates","aria-hidden":"true",$$slots:{default:[Op]},$$scope:{ctx:u}}}),un=new b({props:{code:"u.if(dataIn, predicate, updates)"}}),mn=new b({props:{code:"updates"}}),dn=new b({props:{code:"predicate"}}),gn=new b({props:{code:"predicate"}}),hn=new b({props:{code:"object"}}),bn=new v({props:{lang:"javascript",ext:"js",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">isEven</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">%</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">increment</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> result </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">u</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">if</span><span style="color: #A6ACCD">(isEven</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> increment) </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">expect</span><span style="color: #A6ACCD">(result)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">to</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">eql</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span></code></pre>`}}),vs=new w({props:{class:"header-anchor",href:"#u-filter-arrayin-predicate","aria-hidden":"true",$$slots:{default:[Rp]},$$scope:{ctx:u}}}),_n=new b({props:{code:"u.filter(arrayIn, predicate)"}}),Es=new w({props:{class:"header-anchor",href:"#u-reject-arrayin-predicate","aria-hidden":"true",$$slots:{default:[Bp]},$$scope:{ctx:u}}}),wn=new b({props:{code:"u.reject(arrayIn, predicate)"}}),qs=new w({props:{class:"header-anchor",href:"#u-pickby-objectin-predicate","aria-hidden":"true",$$slots:{default:[Tp]},$$scope:{ctx:u}}}),vn=new b({props:{code:"u.pickBy(objectIn, predicate)"}}),js=new w({props:{class:"header-anchor",href:"#u-omitby-objectin-predicate","aria-hidden":"true",$$slots:{default:[Up]},$$scope:{ctx:u}}}),En=new b({props:{code:"u.omitBy(objectIn, predicate)"}}),xs=new w({props:{class:"header-anchor",href:"#u-pick-objectin-keys","aria-hidden":"true",$$slots:{default:[Wp]},$$scope:{ctx:u}}}),qn=new b({props:{code:"u.pick(objectIn, keys)"}}),ks=new w({props:{class:"header-anchor",href:"#u-omit-objectin-keys","aria-hidden":"true",$$slots:{default:[Yp]},$$scope:{ctx:u}}}),jn=new b({props:{code:"u.omit(objectIn, keys)"}}),Is=new w({props:{class:"header-anchor",href:"#u-matches-datain-condition","aria-hidden":"true",$$slots:{default:[Jp]},$$scope:{ctx:u}}}),xn=new b({props:{code:"u.matches(dataIn, condition)"}}),kn=new b({props:{code:"condition"}}),In=new b({props:{code:"true"}}),Pn=new b({props:{code:"dataIn"}}),Hn=new b({props:{code:"{foo: 12}"}}),Sn=new b({props:{code:"foo"}}),zn=new b({props:{code:"12"}}),Mn=new b({props:{code:"true"}}),On=new v({props:{lang:"javascript",ext:"js",linesCount:8,code:`<pre><code><span class="line"><span style="color: #A6ACCD">u</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">matches</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Bob</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">32</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">address</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">...</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Bob</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">age</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> age </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">30</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95">// true</span></span>
<span class="line"></span></code></pre>`}}),{c(){p=m("h1"),l=F("API"),f=i(),o(I.$$.fragment),P=i(),k=m("h2"),o(q.$$.fragment),Ss=F(" Importing"),Z=i(),_=m("p"),o(E.$$.fragment),cl=F(" exports a default function that is an alias to "),o(zs.$$.fragment),Dl=F(` and
has all the other functions available as props.`),Da=i(),o(Ms.$$.fragment),Yn=m("p"),yl=F("Or you can import the functions piecemeal:"),ya=i(),o(Os.$$.fragment),S=m("h2"),o(cs.$$.fragment),Fl=i(),o(Rs.$$.fragment),Fa=i(),z=m("h2"),o(Ds.$$.fragment),Cl=i(),o(Bs.$$.fragment),Ca=i(),M=m("p"),Al=F("Update as many values as you want, as deeply as you want. The "),o(Ts.$$.fragment),il=F(" parameter can either be an object, a function, or a value. Everything returned from "),o(Us.$$.fragment),$l=F(" is frozen recursively."),Aa=i(),O=m("p"),fl=F("If "),o(Ws.$$.fragment),ul=F(" is an object, for each key/value, it will apply the updates specified in the value to "),o(Ys.$$.fragment),ml=F("."),ia=i(),R=m("p"),dl=F("If "),o(Js.$$.fragment),gl=F(" is a function, it will call the function with "),o(Ns.$$.fragment),hl=F(" and return the value."),$a=i(),ys=m("p"),bl=F("If "),o(Ks.$$.fragment),_l=F(" is a value, it will return that value."),fa=i(),Fs=m("p"),wl=F("Sometimes, you may want to set an entire object to a property, or a function. In that case, you'll need to use a function to return that value, otherwise it would be interpreted as an update. Ex. "),o(Ls.$$.fragment),vl=F("."),ua=i(),Cs=m("p"),El=F("Also available at "),o(Vs.$$.fragment),ql=F("."),ma=i(),ss=m("h3"),o(As.$$.fragment),jl=F(" Simple update"),da=i(),Jn=m("p"),xl=F("Object properties:"),ga=i(),o(Gs.$$.fragment),Nn=m("p"),kl=F("Array elements:"),ha=i(),o(Qs.$$.fragment),ns=m("h3"),o(is.$$.fragment),Il=F(" Multiple updates"),ba=i(),o(Xs.$$.fragment),as=m("h3"),o($s.$$.fragment),Pl=F(" Use a function"),_a=i(),o(Zs.$$.fragment),ls=m("h3"),o(fs.$$.fragment),Hl=F(" Array Manipulation"),wa=i(),Kn=m("p"),Sl=F("Non-trivial array manipulations, such as element removal/insertion/sorting, can be implemented with functions. Because there are so many possible manipulations, we don't provide any helpers and leave this up to you. Simply ensure your function is pure and does not mutate its arguments."),va=i(),o(sn.$$.fragment),Ln=m("p"),zl=F(`Remeda is one of the many libraries providing good utility functions for
such manipulations.`),Ea=i(),o(nn.$$.fragment),ps=m("h3"),o(us.$$.fragment),Ml=F(" Default input data"),qa=i(),Vn=m("p"),Ol=F("When the input data is null or undefined, updeep uses a empty plain object."),ja=i(),o(an.$$.fragment),es=m("h3"),o(ms.$$.fragment),Rl=F(" Partial application"),xa=i(),o(ln.$$.fragment),B=m("h2"),o(ds.$$.fragment),Bl=i(),o(pn.$$.fragment),ka=i(),Gn=m("p"),Tl=F("Freeze your initial state to protect against mutations. Only performs the freezing in development, and returns the original object unchanged in production."),Ia=i(),o(en.$$.fragment),T=m("h2"),o(gs.$$.fragment),Ul=i(),o(on.$$.fragment),Pa=i(),hs=m("p"),Wl=F("Update a single value with a simple string or array path. Can be use to update nested objects, arrays, or a combination. Can also be used to update every element of a nested array with "),o(tn.$$.fragment),Yl=F("."),Ha=i(),o(rn.$$.fragment),o(cn.$$.fragment),o(Dn.$$.fragment),o(yn.$$.fragment),o(Fn.$$.fragment),U=m("h2"),o(bs.$$.fragment),Jl=i(),o(Cn.$$.fragment),Sa=i(),_s=m("p"),Nl=F(`Sometimes, you want to replace an object outright rather than merging it.
You'll need to use a function that returns the new object.
`),o(An.$$.fragment),Kl=F(" creates that function for you."),za=i(),o($n.$$.fragment),o(fn.$$.fragment),W=m("h2"),o(ws.$$.fragment),Ll=i(),o(un.$$.fragment),Ma=i(),j=m("p"),Vl=F("Apply "),o(mn.$$.fragment),Gl=F(" if "),o(dn.$$.fragment),Ql=F(" is truthy, or if "),o(gn.$$.fragment),Xl=F(` is a function.
It evaluates to truthy when called with `),o(hn.$$.fragment),Zl=F("."),Oa=i(),o(bn.$$.fragment),Y=m("h2"),o(vs.$$.fragment),sp=i(),o(_n.$$.fragment),Ra=i(),J=m("h2"),o(Es.$$.fragment),np=i(),o(wn.$$.fragment),Ba=i(),N=m("h2"),o(qs.$$.fragment),ap=i(),o(vn.$$.fragment),Ta=i(),K=m("h2"),o(js.$$.fragment),lp=i(),o(En.$$.fragment),Ua=i(),L=m("h2"),o(xs.$$.fragment),pp=i(),o(qn.$$.fragment),Wa=i(),V=m("h2"),o(ks.$$.fragment),ep=i(),o(jn.$$.fragment),Ya=i(),Qn=m("p"),op=F(`Essentially the same as their Remeda counterparts. The difference being
that if the transformation results in no change, the original object/array is
returned.`),Ja=i(),G=m("h2"),o(Is.$$.fragment),tp=i(),o(xn.$$.fragment),Na=i(),H=m("p"),rp=F("Do a deep comparison with "),o(kn.$$.fragment),cp=F(`, and returns
`),o(In.$$.fragment),Dp=F(" if the "),o(Pn.$$.fragment),yp=F(" object matches."),Ka=i(),x=m("p"),Fp=F("Scalar values are verified for equality (i.e., "),o(Hn.$$.fragment),Cp=F(`
will verify that the object has the prop `),o(Sn.$$.fragment),Ap=F(" set to "),o(zn.$$.fragment),ip=F(`), and
functions are going to be invoked with the object value of the object and
expected to return `),o(Mn.$$.fragment),$p=F(" upon matching."),La=i(),o(On.$$.fragment),this.h()},l(s){p=d(s,"H1",{});var n=g(p);l=C(n,"API"),n.forEach(a),f=$(s),t(I.$$.fragment,s),P=$(s),k=d(s,"H2",{id:!0,tabindex:!0});var Xn=g(k);t(q.$$.fragment,Xn),Ss=C(Xn," Importing"),Xn.forEach(a),Z=$(s),_=d(s,"P",{});var Ps=g(_);t(E.$$.fragment,Ps),cl=C(Ps," exports a default function that is an alias to "),t(zs.$$.fragment,Ps),Dl=C(Ps,` and
has all the other functions available as props.`),Ps.forEach(a),Da=$(s),t(Ms.$$.fragment,s),Yn=d(s,"P",{});var pa=g(Yn);yl=C(pa,"Or you can import the functions piecemeal:"),pa.forEach(a),ya=$(s),t(Os.$$.fragment,s),S=d(s,"H2",{id:!0,tabindex:!0});var Rn=g(S);t(cs.$$.fragment,Rn),Fl=$(Rn),t(Rs.$$.fragment,Rn),Rn.forEach(a),Fa=$(s),z=d(s,"H2",{id:!0,tabindex:!0});var Bn=g(z);t(Ds.$$.fragment,Bn),Cl=$(Bn),t(Bs.$$.fragment,Bn),Bn.forEach(a),Ca=$(s),M=d(s,"P",{});var os=g(M);Al=C(os,"Update as many values as you want, as deeply as you want. The "),t(Ts.$$.fragment,os),il=C(os," parameter can either be an object, a function, or a value. Everything returned from "),t(Us.$$.fragment,os),$l=C(os," is frozen recursively."),os.forEach(a),Aa=$(s),O=d(s,"P",{});var ts=g(O);fl=C(ts,"If "),t(Ws.$$.fragment,ts),ul=C(ts," is an object, for each key/value, it will apply the updates specified in the value to "),t(Ys.$$.fragment,ts),ml=C(ts,"."),ts.forEach(a),ia=$(s),R=d(s,"P",{});var rs=g(R);dl=C(rs,"If "),t(Js.$$.fragment,rs),gl=C(rs," is a function, it will call the function with "),t(Ns.$$.fragment,rs),hl=C(rs," and return the value."),rs.forEach(a),$a=$(s),ys=d(s,"P",{});var Tn=g(ys);bl=C(Tn,"If "),t(Ks.$$.fragment,Tn),_l=C(Tn," is a value, it will return that value."),Tn.forEach(a),fa=$(s),Fs=d(s,"P",{});var Un=g(Fs);wl=C(Un,"Sometimes, you may want to set an entire object to a property, or a function. In that case, you'll need to use a function to return that value, otherwise it would be interpreted as an update. Ex. "),t(Ls.$$.fragment,Un),vl=C(Un,"."),Un.forEach(a),ua=$(s),Cs=d(s,"P",{});var Wn=g(Cs);El=C(Wn,"Also available at "),t(Vs.$$.fragment,Wn),ql=C(Wn,"."),Wn.forEach(a),ma=$(s),ss=d(s,"H3",{id:!0,tabindex:!0});var Zn=g(ss);t(As.$$.fragment,Zn),jl=C(Zn," Simple update"),Zn.forEach(a),da=$(s),Jn=d(s,"P",{});var ea=g(Jn);xl=C(ea,"Object properties:"),ea.forEach(a),ga=$(s),t(Gs.$$.fragment,s),Nn=d(s,"P",{});var oa=g(Nn);kl=C(oa,"Array elements:"),oa.forEach(a),ha=$(s),t(Qs.$$.fragment,s),ns=d(s,"H3",{id:!0,tabindex:!0});var sa=g(ns);t(is.$$.fragment,sa),Il=C(sa," Multiple updates"),sa.forEach(a),ba=$(s),t(Xs.$$.fragment,s),as=d(s,"H3",{id:!0,tabindex:!0});var na=g(as);t($s.$$.fragment,na),Pl=C(na," Use a function"),na.forEach(a),_a=$(s),t(Zs.$$.fragment,s),ls=d(s,"H3",{id:!0,tabindex:!0});var aa=g(ls);t(fs.$$.fragment,aa),Hl=C(aa," Array Manipulation"),aa.forEach(a),wa=$(s),Kn=d(s,"P",{});var ta=g(Kn);Sl=C(ta,"Non-trivial array manipulations, such as element removal/insertion/sorting, can be implemented with functions. Because there are so many possible manipulations, we don't provide any helpers and leave this up to you. Simply ensure your function is pure and does not mutate its arguments."),ta.forEach(a),va=$(s),t(sn.$$.fragment,s),Ln=d(s,"P",{});var ra=g(Ln);zl=C(ra,`Remeda is one of the many libraries providing good utility functions for
such manipulations.`),ra.forEach(a),Ea=$(s),t(nn.$$.fragment,s),ps=d(s,"H3",{id:!0,tabindex:!0});var la=g(ps);t(us.$$.fragment,la),Ml=C(la," Default input data"),la.forEach(a),qa=$(s),Vn=d(s,"P",{});var ca=g(Vn);Ol=C(ca,"When the input data is null or undefined, updeep uses a empty plain object."),ca.forEach(a),ja=$(s),t(an.$$.fragment,s),es=d(s,"H3",{id:!0,tabindex:!0});var fp=g(es);t(ms.$$.fragment,fp),Rl=C(fp," Partial application"),fp.forEach(a),xa=$(s),t(ln.$$.fragment,s),B=d(s,"H2",{id:!0,tabindex:!0});var Ga=g(B);t(ds.$$.fragment,Ga),Bl=$(Ga),t(pn.$$.fragment,Ga),Ga.forEach(a),ka=$(s),Gn=d(s,"P",{});var up=g(Gn);Tl=C(up,"Freeze your initial state to protect against mutations. Only performs the freezing in development, and returns the original object unchanged in production."),up.forEach(a),Ia=$(s),t(en.$$.fragment,s),T=d(s,"H2",{id:!0,tabindex:!0});var Qa=g(T);t(gs.$$.fragment,Qa),Ul=$(Qa),t(on.$$.fragment,Qa),Qa.forEach(a),Pa=$(s),hs=d(s,"P",{});var Xa=g(hs);Wl=C(Xa,"Update a single value with a simple string or array path. Can be use to update nested objects, arrays, or a combination. Can also be used to update every element of a nested array with "),t(tn.$$.fragment,Xa),Yl=C(Xa,"."),Xa.forEach(a),Ha=$(s),t(rn.$$.fragment,s),t(cn.$$.fragment,s),t(Dn.$$.fragment,s),t(yn.$$.fragment,s),t(Fn.$$.fragment,s),U=d(s,"H2",{id:!0,tabindex:!0});var Za=g(U);t(bs.$$.fragment,Za),Jl=$(Za),t(Cn.$$.fragment,Za),Za.forEach(a),Sa=$(s),_s=d(s,"P",{});var sl=g(_s);Nl=C(sl,`Sometimes, you want to replace an object outright rather than merging it.
You'll need to use a function that returns the new object.
`),t(An.$$.fragment,sl),Kl=C(sl," creates that function for you."),sl.forEach(a),za=$(s),t($n.$$.fragment,s),t(fn.$$.fragment,s),W=d(s,"H2",{id:!0,tabindex:!0});var nl=g(W);t(ws.$$.fragment,nl),Ll=$(nl),t(un.$$.fragment,nl),nl.forEach(a),Ma=$(s),j=d(s,"P",{});var Q=g(j);Vl=C(Q,"Apply "),t(mn.$$.fragment,Q),Gl=C(Q," if "),t(dn.$$.fragment,Q),Ql=C(Q," is truthy, or if "),t(gn.$$.fragment,Q),Xl=C(Q,` is a function.
It evaluates to truthy when called with `),t(hn.$$.fragment,Q),Zl=C(Q,"."),Q.forEach(a),Oa=$(s),t(bn.$$.fragment,s),Y=d(s,"H2",{id:!0,tabindex:!0});var al=g(Y);t(vs.$$.fragment,al),sp=$(al),t(_n.$$.fragment,al),al.forEach(a),Ra=$(s),J=d(s,"H2",{id:!0,tabindex:!0});var ll=g(J);t(Es.$$.fragment,ll),np=$(ll),t(wn.$$.fragment,ll),ll.forEach(a),Ba=$(s),N=d(s,"H2",{id:!0,tabindex:!0});var pl=g(N);t(qs.$$.fragment,pl),ap=$(pl),t(vn.$$.fragment,pl),pl.forEach(a),Ta=$(s),K=d(s,"H2",{id:!0,tabindex:!0});var el=g(K);t(js.$$.fragment,el),lp=$(el),t(En.$$.fragment,el),el.forEach(a),Ua=$(s),L=d(s,"H2",{id:!0,tabindex:!0});var ol=g(L);t(xs.$$.fragment,ol),pp=$(ol),t(qn.$$.fragment,ol),ol.forEach(a),Wa=$(s),V=d(s,"H2",{id:!0,tabindex:!0});var tl=g(V);t(ks.$$.fragment,tl),ep=$(tl),t(jn.$$.fragment,tl),tl.forEach(a),Ya=$(s),Qn=d(s,"P",{});var mp=g(Qn);op=C(mp,`Essentially the same as their Remeda counterparts. The difference being
that if the transformation results in no change, the original object/array is
returned.`),mp.forEach(a),Ja=$(s),G=d(s,"H2",{id:!0,tabindex:!0});var rl=g(G);t(Is.$$.fragment,rl),tp=$(rl),t(xn.$$.fragment,rl),rl.forEach(a),Na=$(s),H=d(s,"P",{});var Hs=g(H);rp=C(Hs,"Do a deep comparison with "),t(kn.$$.fragment,Hs),cp=C(Hs,`, and returns
`),t(In.$$.fragment,Hs),Dp=C(Hs," if the "),t(Pn.$$.fragment,Hs),yp=C(Hs," object matches."),Hs.forEach(a),Ka=$(s),x=d(s,"P",{});var X=g(x);Fp=C(X,"Scalar values are verified for equality (i.e., "),t(Hn.$$.fragment,X),Cp=C(X,`
will verify that the object has the prop `),t(Sn.$$.fragment,X),Ap=C(X," set to "),t(zn.$$.fragment,X),ip=C(X,`), and
functions are going to be invoked with the object value of the object and
expected to return `),t(Mn.$$.fragment,X),$p=C(X," upon matching."),X.forEach(a),La=$(s),t(On.$$.fragment,s),this.h()},h(){h(k,"id","importing"),h(k,"tabindex","-1"),h(S,"id","u-datain-updates"),h(S,"tabindex","-1"),h(z,"id","u-update-datain-updates"),h(z,"tabindex","-1"),h(ss,"id","simple-update"),h(ss,"tabindex","-1"),h(ns,"id","multiple-updates"),h(ns,"tabindex","-1"),h(as,"id","use-a-function"),h(as,"tabindex","-1"),h(ls,"id","array-manipulation"),h(ls,"tabindex","-1"),h(ps,"id","default-input-data"),h(ps,"tabindex","-1"),h(es,"id","partial-application"),h(es,"tabindex","-1"),h(B,"id","u-freeze-datain"),h(B,"tabindex","-1"),h(T,"id","u-updatein-datain-path-value"),h(T,"tabindex","-1"),h(U,"id","u-constant-datain"),h(U,"tabindex","-1"),h(W,"id","u-if-datain-predicate-updates"),h(W,"tabindex","-1"),h(Y,"id","u-filter-arrayin-predicate"),h(Y,"tabindex","-1"),h(J,"id","u-reject-arrayin-predicate"),h(J,"tabindex","-1"),h(N,"id","u-pickby-objectin-predicate"),h(N,"tabindex","-1"),h(K,"id","u-omitby-objectin-predicate"),h(K,"tabindex","-1"),h(L,"id","u-pick-objectin-keys"),h(L,"tabindex","-1"),h(V,"id","u-omit-objectin-keys"),h(V,"tabindex","-1"),h(G,"id","u-matches-datain-condition"),h(G,"tabindex","-1")},m(s,n){e(s,p,n),A(p,l),e(s,f,n),r(I,s,n),e(s,P,n),e(s,k,n),r(q,k,null),A(k,Ss),e(s,Z,n),e(s,_,n),r(E,_,null),A(_,cl),r(zs,_,null),A(_,Dl),e(s,Da,n),r(Ms,s,n),e(s,Yn,n),A(Yn,yl),e(s,ya,n),r(Os,s,n),e(s,S,n),r(cs,S,null),A(S,Fl),r(Rs,S,null),e(s,Fa,n),e(s,z,n),r(Ds,z,null),A(z,Cl),r(Bs,z,null),e(s,Ca,n),e(s,M,n),A(M,Al),r(Ts,M,null),A(M,il),r(Us,M,null),A(M,$l),e(s,Aa,n),e(s,O,n),A(O,fl),r(Ws,O,null),A(O,ul),r(Ys,O,null),A(O,ml),e(s,ia,n),e(s,R,n),A(R,dl),r(Js,R,null),A(R,gl),r(Ns,R,null),A(R,hl),e(s,$a,n),e(s,ys,n),A(ys,bl),r(Ks,ys,null),A(ys,_l),e(s,fa,n),e(s,Fs,n),A(Fs,wl),r(Ls,Fs,null),A(Fs,vl),e(s,ua,n),e(s,Cs,n),A(Cs,El),r(Vs,Cs,null),A(Cs,ql),e(s,ma,n),e(s,ss,n),r(As,ss,null),A(ss,jl),e(s,da,n),e(s,Jn,n),A(Jn,xl),e(s,ga,n),r(Gs,s,n),e(s,Nn,n),A(Nn,kl),e(s,ha,n),r(Qs,s,n),e(s,ns,n),r(is,ns,null),A(ns,Il),e(s,ba,n),r(Xs,s,n),e(s,as,n),r($s,as,null),A(as,Pl),e(s,_a,n),r(Zs,s,n),e(s,ls,n),r(fs,ls,null),A(ls,Hl),e(s,wa,n),e(s,Kn,n),A(Kn,Sl),e(s,va,n),r(sn,s,n),e(s,Ln,n),A(Ln,zl),e(s,Ea,n),r(nn,s,n),e(s,ps,n),r(us,ps,null),A(ps,Ml),e(s,qa,n),e(s,Vn,n),A(Vn,Ol),e(s,ja,n),r(an,s,n),e(s,es,n),r(ms,es,null),A(es,Rl),e(s,xa,n),r(ln,s,n),e(s,B,n),r(ds,B,null),A(B,Bl),r(pn,B,null),e(s,ka,n),e(s,Gn,n),A(Gn,Tl),e(s,Ia,n),r(en,s,n),e(s,T,n),r(gs,T,null),A(T,Ul),r(on,T,null),e(s,Pa,n),e(s,hs,n),A(hs,Wl),r(tn,hs,null),A(hs,Yl),e(s,Ha,n),r(rn,s,n),r(cn,s,n),r(Dn,s,n),r(yn,s,n),r(Fn,s,n),e(s,U,n),r(bs,U,null),A(U,Jl),r(Cn,U,null),e(s,Sa,n),e(s,_s,n),A(_s,Nl),r(An,_s,null),A(_s,Kl),e(s,za,n),r($n,s,n),r(fn,s,n),e(s,W,n),r(ws,W,null),A(W,Ll),r(un,W,null),e(s,Ma,n),e(s,j,n),A(j,Vl),r(mn,j,null),A(j,Gl),r(dn,j,null),A(j,Ql),r(gn,j,null),A(j,Xl),r(hn,j,null),A(j,Zl),e(s,Oa,n),r(bn,s,n),e(s,Y,n),r(vs,Y,null),A(Y,sp),r(_n,Y,null),e(s,Ra,n),e(s,J,n),r(Es,J,null),A(J,np),r(wn,J,null),e(s,Ba,n),e(s,N,n),r(qs,N,null),A(N,ap),r(vn,N,null),e(s,Ta,n),e(s,K,n),r(js,K,null),A(K,lp),r(En,K,null),e(s,Ua,n),e(s,L,n),r(xs,L,null),A(L,pp),r(qn,L,null),e(s,Wa,n),e(s,V,n),r(ks,V,null),A(V,ep),r(jn,V,null),e(s,Ya,n),e(s,Qn,n),A(Qn,op),e(s,Ja,n),e(s,G,n),r(Is,G,null),A(G,tp),r(xn,G,null),e(s,Na,n),e(s,H,n),A(H,rp),r(kn,H,null),A(H,cp),r(In,H,null),A(H,Dp),r(Pn,H,null),A(H,yp),e(s,Ka,n),e(s,x,n),A(x,Fp),r(Hn,x,null),A(x,Cp),r(Sn,x,null),A(x,Ap),r(zn,x,null),A(x,ip),r(Mn,x,null),A(x,$p),e(s,La,n),r(On,s,n),Va=!0},p(s,[n]){const Xn={};n&1&&(Xn.$$scope={dirty:n,ctx:s}),I.$set(Xn);const Ps={};n&1&&(Ps.$$scope={dirty:n,ctx:s}),q.$set(Ps);const pa={};n&1&&(pa.$$scope={dirty:n,ctx:s}),cs.$set(pa);const Rn={};n&1&&(Rn.$$scope={dirty:n,ctx:s}),Ds.$set(Rn);const Bn={};n&1&&(Bn.$$scope={dirty:n,ctx:s}),As.$set(Bn);const os={};n&1&&(os.$$scope={dirty:n,ctx:s}),is.$set(os);const ts={};n&1&&(ts.$$scope={dirty:n,ctx:s}),$s.$set(ts);const rs={};n&1&&(rs.$$scope={dirty:n,ctx:s}),fs.$set(rs);const Tn={};n&1&&(Tn.$$scope={dirty:n,ctx:s}),us.$set(Tn);const Un={};n&1&&(Un.$$scope={dirty:n,ctx:s}),ms.$set(Un);const Wn={};n&1&&(Wn.$$scope={dirty:n,ctx:s}),ds.$set(Wn);const Zn={};n&1&&(Zn.$$scope={dirty:n,ctx:s}),gs.$set(Zn);const ea={};n&1&&(ea.$$scope={dirty:n,ctx:s}),bs.$set(ea);const oa={};n&1&&(oa.$$scope={dirty:n,ctx:s}),ws.$set(oa);const sa={};n&1&&(sa.$$scope={dirty:n,ctx:s}),vs.$set(sa);const na={};n&1&&(na.$$scope={dirty:n,ctx:s}),Es.$set(na);const aa={};n&1&&(aa.$$scope={dirty:n,ctx:s}),qs.$set(aa);const ta={};n&1&&(ta.$$scope={dirty:n,ctx:s}),js.$set(ta);const ra={};n&1&&(ra.$$scope={dirty:n,ctx:s}),xs.$set(ra);const la={};n&1&&(la.$$scope={dirty:n,ctx:s}),ks.$set(la);const ca={};n&1&&(ca.$$scope={dirty:n,ctx:s}),Is.$set(ca)},i(s){Va||(c(I.$$.fragment,s),c(q.$$.fragment,s),c(E.$$.fragment,s),c(zs.$$.fragment,s),c(Ms.$$.fragment,s),c(Os.$$.fragment,s),c(cs.$$.fragment,s),c(Rs.$$.fragment,s),c(Ds.$$.fragment,s),c(Bs.$$.fragment,s),c(Ts.$$.fragment,s),c(Us.$$.fragment,s),c(Ws.$$.fragment,s),c(Ys.$$.fragment,s),c(Js.$$.fragment,s),c(Ns.$$.fragment,s),c(Ks.$$.fragment,s),c(Ls.$$.fragment,s),c(Vs.$$.fragment,s),c(As.$$.fragment,s),c(Gs.$$.fragment,s),c(Qs.$$.fragment,s),c(is.$$.fragment,s),c(Xs.$$.fragment,s),c($s.$$.fragment,s),c(Zs.$$.fragment,s),c(fs.$$.fragment,s),c(sn.$$.fragment,s),c(nn.$$.fragment,s),c(us.$$.fragment,s),c(an.$$.fragment,s),c(ms.$$.fragment,s),c(ln.$$.fragment,s),c(ds.$$.fragment,s),c(pn.$$.fragment,s),c(en.$$.fragment,s),c(gs.$$.fragment,s),c(on.$$.fragment,s),c(tn.$$.fragment,s),c(rn.$$.fragment,s),c(cn.$$.fragment,s),c(Dn.$$.fragment,s),c(yn.$$.fragment,s),c(Fn.$$.fragment,s),c(bs.$$.fragment,s),c(Cn.$$.fragment,s),c(An.$$.fragment,s),c($n.$$.fragment,s),c(fn.$$.fragment,s),c(ws.$$.fragment,s),c(un.$$.fragment,s),c(mn.$$.fragment,s),c(dn.$$.fragment,s),c(gn.$$.fragment,s),c(hn.$$.fragment,s),c(bn.$$.fragment,s),c(vs.$$.fragment,s),c(_n.$$.fragment,s),c(Es.$$.fragment,s),c(wn.$$.fragment,s),c(qs.$$.fragment,s),c(vn.$$.fragment,s),c(js.$$.fragment,s),c(En.$$.fragment,s),c(xs.$$.fragment,s),c(qn.$$.fragment,s),c(ks.$$.fragment,s),c(jn.$$.fragment,s),c(Is.$$.fragment,s),c(xn.$$.fragment,s),c(kn.$$.fragment,s),c(In.$$.fragment,s),c(Pn.$$.fragment,s),c(Hn.$$.fragment,s),c(Sn.$$.fragment,s),c(zn.$$.fragment,s),c(Mn.$$.fragment,s),c(On.$$.fragment,s),Va=!0)},o(s){D(I.$$.fragment,s),D(q.$$.fragment,s),D(E.$$.fragment,s),D(zs.$$.fragment,s),D(Ms.$$.fragment,s),D(Os.$$.fragment,s),D(cs.$$.fragment,s),D(Rs.$$.fragment,s),D(Ds.$$.fragment,s),D(Bs.$$.fragment,s),D(Ts.$$.fragment,s),D(Us.$$.fragment,s),D(Ws.$$.fragment,s),D(Ys.$$.fragment,s),D(Js.$$.fragment,s),D(Ns.$$.fragment,s),D(Ks.$$.fragment,s),D(Ls.$$.fragment,s),D(Vs.$$.fragment,s),D(As.$$.fragment,s),D(Gs.$$.fragment,s),D(Qs.$$.fragment,s),D(is.$$.fragment,s),D(Xs.$$.fragment,s),D($s.$$.fragment,s),D(Zs.$$.fragment,s),D(fs.$$.fragment,s),D(sn.$$.fragment,s),D(nn.$$.fragment,s),D(us.$$.fragment,s),D(an.$$.fragment,s),D(ms.$$.fragment,s),D(ln.$$.fragment,s),D(ds.$$.fragment,s),D(pn.$$.fragment,s),D(en.$$.fragment,s),D(gs.$$.fragment,s),D(on.$$.fragment,s),D(tn.$$.fragment,s),D(rn.$$.fragment,s),D(cn.$$.fragment,s),D(Dn.$$.fragment,s),D(yn.$$.fragment,s),D(Fn.$$.fragment,s),D(bs.$$.fragment,s),D(Cn.$$.fragment,s),D(An.$$.fragment,s),D($n.$$.fragment,s),D(fn.$$.fragment,s),D(ws.$$.fragment,s),D(un.$$.fragment,s),D(mn.$$.fragment,s),D(dn.$$.fragment,s),D(gn.$$.fragment,s),D(hn.$$.fragment,s),D(bn.$$.fragment,s),D(vs.$$.fragment,s),D(_n.$$.fragment,s),D(Es.$$.fragment,s),D(wn.$$.fragment,s),D(qs.$$.fragment,s),D(vn.$$.fragment,s),D(js.$$.fragment,s),D(En.$$.fragment,s),D(xs.$$.fragment,s),D(qn.$$.fragment,s),D(ks.$$.fragment,s),D(jn.$$.fragment,s),D(Is.$$.fragment,s),D(xn.$$.fragment,s),D(kn.$$.fragment,s),D(In.$$.fragment,s),D(Pn.$$.fragment,s),D(Hn.$$.fragment,s),D(Sn.$$.fragment,s),D(zn.$$.fragment,s),D(Mn.$$.fragment,s),D(On.$$.fragment,s),Va=!1},d(s){s&&a(p),s&&a(f),y(I,s),s&&a(P),s&&a(k),y(q),s&&a(Z),s&&a(_),y(E),y(zs),s&&a(Da),y(Ms,s),s&&a(Yn),s&&a(ya),y(Os,s),s&&a(S),y(cs),y(Rs),s&&a(Fa),s&&a(z),y(Ds),y(Bs),s&&a(Ca),s&&a(M),y(Ts),y(Us),s&&a(Aa),s&&a(O),y(Ws),y(Ys),s&&a(ia),s&&a(R),y(Js),y(Ns),s&&a($a),s&&a(ys),y(Ks),s&&a(fa),s&&a(Fs),y(Ls),s&&a(ua),s&&a(Cs),y(Vs),s&&a(ma),s&&a(ss),y(As),s&&a(da),s&&a(Jn),s&&a(ga),y(Gs,s),s&&a(Nn),s&&a(ha),y(Qs,s),s&&a(ns),y(is),s&&a(ba),y(Xs,s),s&&a(as),y($s),s&&a(_a),y(Zs,s),s&&a(ls),y(fs),s&&a(wa),s&&a(Kn),s&&a(va),y(sn,s),s&&a(Ln),s&&a(Ea),y(nn,s),s&&a(ps),y(us),s&&a(qa),s&&a(Vn),s&&a(ja),y(an,s),s&&a(es),y(ms),s&&a(xa),y(ln,s),s&&a(B),y(ds),y(pn),s&&a(ka),s&&a(Gn),s&&a(Ia),y(en,s),s&&a(T),y(gs),y(on),s&&a(Pa),s&&a(hs),y(tn),s&&a(Ha),y(rn,s),y(cn,s),y(Dn,s),y(yn,s),y(Fn,s),s&&a(U),y(bs),y(Cn),s&&a(Sa),s&&a(_s),y(An),s&&a(za),y($n,s),y(fn,s),s&&a(W),y(ws),y(un),s&&a(Ma),s&&a(j),y(mn),y(dn),y(gn),y(hn),s&&a(Oa),y(bn,s),s&&a(Y),y(vs),y(_n),s&&a(Ra),s&&a(J),y(Es),y(wn),s&&a(Ba),s&&a(N),y(qs),y(vn),s&&a(Ta),s&&a(K),y(js),y(En),s&&a(Ua),s&&a(L),y(xs),y(qn),s&&a(Wa),s&&a(V),y(ks),y(jn),s&&a(Ya),s&&a(Qn),s&&a(Ja),s&&a(G),y(Is),y(xn),s&&a(Na),s&&a(H),y(kn),y(In),y(Pn),s&&a(Ka),s&&a(x),y(Hn),y(Sn),y(zn),y(Mn),s&&a(La),y(On,s)}}}class Vp extends dp{constructor(p){super(),gp(this,p,null,Np,hp,{})}}export{Vp as default};
